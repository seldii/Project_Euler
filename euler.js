const Euler = {
  //If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
  //The sum of these multiples is 23.
  //Find the sum of all the multiples of 3 or 5 below 1000.
  multiples: () => {
    let array = new Array(999);
    for (let i = 0; i < 1000; i++) {
      array[i] = i;
    }

    let sum = 0;

    array.forEach(num => {
      if (num % 3 === 0 || num % 5 === 0 || num % 15 === 0) {
        sum += num;
      }
    });

    return sum;
  },

  //Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  //By starting with 1 and 2, the first 10 terms will be:1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  //By considering the terms in the Fibonacci sequence whose values do not exceed four million,
  //find the sum of the even-valued terms.

  fibonacci: () => {
    let array = [1, 2];
    let i = 2;
    let sum = 2;
    while (array[i - 1] < 4000000) {
      array[i] = array[i - 1] + array[i - 2];
      if (array[i] < 4000000 && array[i] % 2 === 0) {
        sum += array[i];
      }
      i++;
    }
    return sum;
  },

  //What is the largest prime factor of the number 600851475143 ?

  primeFactor: number => {
    let i = 2;

    function isPrime(num) {
      for (var i = 2; i <= Math.sqrt(num); i++) {
        if (num % i === 0) {
          return false;
        }
      }
      return true;
    }
    let factor = [];
    while (i <= Math.sqrt(number)) {
      if (number % i === 0 && isPrime(i)) {
        factor.push(i);
      }
      i++;
    }
    return factor.slice(-1)[0];
  },

  //A palindromic number reads the same both ways.The largest palindrome made from the product of two 2-digit
  //numbers is 9009 = 91 Ã— 99.
  //Find the largest palindrome made from the product of two 3-digit numbers.

  isPalindrome: num => {
    let string = num.toString(); //turn the number into string
    let reversedString = "";
    for (let i = string.length - 1; i >= 0; i--) {
      reversedString += string[i];
    }
    let reversedNum = parseInt(reversedString, 10);
    if (num === reversedNum) return true;
    else return false;
  },

  largestPalindrome: () => {
    let largest = 0;
    for (let i = 100; i <= 999; i++) {
      for (let j = 100; j <= 999; j++) {
        let multiplied = i * j;
        if (Euler.isPalindrome(multiplied) && multiplied > largest) {
          largest = multiplied;
        }
      }
    }
    return largest;
  },

  //2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
  //What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

  smallestMultiple: () => {

    function gcd(a, b) {
      return b === 0 ? a : gcd(b, a % b); // Euclidean algorithm
    }
    function lcm(a, b) {
      return (a * b) / gcd(a, b);
    }

    let result = 1;
    for (var i = 2; i <= 20; ++i) result = lcm(result, i);
    return result;
  }
};

console.log(Euler.smallestMultiple());

module.exports = Euler;
